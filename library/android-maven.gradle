buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
    }
}
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream()) // local.properties 有 sdk 的绝对位置

repositories {
    jcenter()
    maven {
        url properties.getProperty("sdk.dir")+"/extras/android/m2repository"
    }
}
apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

project.ext {
    group = project.property('ART_GROUP')
    version = project.property('ART_VER')
    archivesBaseName = ART_ARTIFACT
}

tasks.withType(Jar) {
    baseName project.property('ART_ARTIFACT')
    manifest {
        attributes 'Author': DEV_NAME,
                'Email': DEV_EMAIL,
                'Version': ART_VER,
                'Build-Date': new Date().dateString
    }
}
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(configurations.compile.files, android.getBootClasspath().join(File.pathSeparator))
//    title PRJ_NAME + " " + ART_VER + " API"
//    options.encoding 'utf-8'
//    options.charSet 'utf-8'
//    options.tags 'date:t:"Date:"'
//}

//task javadocJar(type: Jar, dependsOn: generateDebugJavadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}
android.libraryVariants.all { variant ->
    // println variant.javaCompile.classpath.files
    if(variant.name == 'release') {
        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            title "${PRJ_NAME}  ${ART_VER}  API"
            // description = ''
            source = variant.javaCompile.source
            classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath(), project.file
                    ("gen"))
            options {
                links "http://docs.oracle.com/javase/7/docs/api/"
                linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
                encoding 'utf-8'
                charSet 'utf-8'
                tags 'date:t:Date:'
                tags 'sample:t:Sample:'
                tags 'attr:a:Attribute:'
            }
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
            exclude 'cn/ieclipse/af/view/wheelview/'
        }
        task("javadocJar", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
            classifier = 'javadoc'
            from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
        }
        artifacts {
            archives tasks.getByName("javadocJar")
        }
    }
}
artifacts {
    // archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                // artifactId project.property('ART_ARTIFACT')
                packaging ART_PKG
                // Add your description here
                name project.property('PRJ_NAME')
                url project.property('PRJ_URL')
                description project.property('PRJ_DESC')
                // Set your license
                licenses {
                    license {
                        name project.property('LIC_NAME')
                        url project.property('LIC_URL')
                    }
                }
                developers {
                    developer {
                        id project.property('DEV_ID')
                        name project.property('DEV_NAME')
                        email project.property('DEV_EMAIL')
                    }
                }
                scm {
                    connection project.property('SCM_REPO')
                    developerConnection project.property('SCM_REPO')
                    url project.property('SCM_URL')
                }
            }
        }
    }
    repositories.mavenDeployer() {
        repository(url: ART_LOCAL_URL)
        pom.groupId = ART_GROUP
        pom.artifactId = ART_ARTIFACT
        pom.version = ART_VER
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    configurations = ['archives']
    pkg {
        repo = 'maven' //'generic'
        name = project.property('PRJ_NAME')
        userOrg = user
        licenses = ['Apache-2.0']
        websiteUrl = project.property('PRJ_URL')
        vcsUrl = project.property('SCM_URL')
        publish = project.has("release")
        version {
            name = project.property('ART_VER')
            desc = project.property('PKG_VER_DESC')
            vcsTag = project.property('SCM_TAG')
            //attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
        }
        /*
        mavenCentralSync {
            sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
            user = 'userToken' //OSS user token
            password = 'paasword' //OSS user password
            close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
        }
       */
        // full config please visit https://github.com/bintray/gradle-bintray-plugin
    }
}
