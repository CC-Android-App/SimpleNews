apply plugin: 'maven'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream()) // local.properties 有 sdk 的绝对位置

project.ext {
    group = project.property('ART_GROUP')
    version = project.property('ART_VER')
    archivesBaseName = ART_ARTIFACT
}

def getRepositoryUrl() {
    return hasProperty('repositoryUrl') ? property('repositoryUrl') : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getRepositoryUsername() {
    return hasProperty('repositoryUsername') ? property('repositoryUsername') : ""
}

def getRepositoryPassword() {
    return hasProperty('repositoryPassword') ? property('repositoryPassword') : ""
}

def getPassword(String passwordName) {
    return new String(System.console().readPassword("\nProvide $passwordName:"))
}

afterEvaluate { project ->
    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += files(android.bootClasspath)
        options {
        	links "http://docs.oracle.com/javase/7/docs/api/"
            linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
            encoding 'utf-8'
            charSet 'utf-8'
            tags 'date:t:Date:'
            tags 'sample:t:Sample:'
            tags 'attr:a:Attribute:'
        }
    }

    task androidJavadocJar(type: Jar) {
        classifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    android.libraryVariants.all { variant ->
        def name = variant.name.capitalize()
        task "jar${name}"(type: Jar, dependsOn: variant.javaCompile) {
            from variant.javaCompile.destinationDir
        }
    }

    artifacts.add('archives', androidJavadocJar)
    artifacts.add('archives', androidSourcesJar)

	/*
    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
    */

    uploadArchives {
        configuration = configurations.archives
        repositories.mavenDeployer {/*
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }*/

            repository(url: ART_LOCAL_URL/*getRepositoryUrl()*/) {
                authentication(
                        userName: getRepositoryUsername(),
                        password: getRepositoryPassword())

            }

            pom.project {
                name PRJ_NAME
                groupId project.ext.group
                artifactId project.ext.archivesBaseName
                version project.ext.version
                packaging ART_PKG
                description PRJ_DESC
                url PRJ_URL
				
                scm {
                    url SCM_URL
                    connection 'scm:git:${SCM_REPO}'
                    developerConnection 'scm:git:${SCM_DEV}'
                }

                licenses {
                    license {
                        name LIC_NAME
                        url LIC_URL
                        distribution LIC_DESC
                    }
                }

                developers {
                    developer {
                        id DEV_ID
                        name DEV_NAME
                        email DEV_EMAIL
                    }
                }
            }
        }
    }
}